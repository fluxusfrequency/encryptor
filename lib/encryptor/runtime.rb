require_relative 'authenticate'
require_relative 'cipher'
require_relative 'crack'
require_relative 'decrypt'
require_relative 'encrypt'

module Encryptor
  class Runtime

    def initialize
      last_rotation1 = rand(91)
      @last_rotation1 = last_rotation1
      last_rotation2 = rand(91)
      @last_rotation2 = last_rotation2
      last_rotation3 = rand(91)
      @last_rotation3 = last_rotation3
      @encryptor = Encrypt.new
      @decryptor = Decrypt.new
      @cracker = Crack.new
      @authenticator = Authenticator.new
      @cipher = Cipher.new
    end

    def run
      puts "\nWelcome to Encryptor!"
      @authenticator.authenticate_user
      puts "Logged in. Type 'help' for instructions."
      check
      @command = ""
      while @command != "quit"
        puts "\nEnter command: "
        print ">"
        input = gets.chomp
        @parts = input.split
        @command = @parts[0]
        parse_input
      end
    end

    def parse_input
      case @command
          when "set" then set
          when "setr" then set_random
          when "check" then check
          when "er" then rand_encrypt
          when "e" then encrypt
          when "d" then decrypt
          when "ef" then file_encrypt
          when "df" then file_decrypt
          when "crack" then cracks
          when "pwd" then change
          when "help" then help
          when "quit"
            puts "Goodbye! Encryptor is shutting down."
          else
            puts "Unknown command, please try again."
      end
    end

    def set
      @last_rotation1 = @parts[1].to_i
      @last_rotation2 = @parts[2].to_i
      @last_rotation3 = @parts[3].to_i
      puts "\n\n"
      puts "Cipher was set."
      check
    end

    def set_random
      @last_rotation1 = rand(91)
      @last_rotation2 = rand(91)
      @last_rotation3 = rand(91)
      puts "\n\n"
      puts "Cipher was set."
      check
    end

    def check
      puts "\n::Current rotations are: #{@last_rotation1}, #{@last_rotation2}, #{@last_rotation3}::"
    end

    def rand_encrypt
      @last_rotation1 = rand(91)
      @last_rotation2 = rand(91)
      @last_rotation3 = rand(91)
      puts "\n\n\n"
      puts @encryptor.encrypt(@parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
    end

    def encrypt
      puts "\n\n\n"
      puts @encryptor.encrypt(@parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
    end

    def decrypt
      puts "\n\n\n"
      puts @decryptor.decrypt(@parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
    end

    def file_encrypt
      @encryptor.encrypt_file(@parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
      puts "File encrypted successfully."
    end

    def file_decrypt
      @encryptor.encrypt_file(@parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
      puts "File decrypted successfully."
    end

    def cracks
      puts "\n\n\n"
      puts @cracker.crack((@parts[1..-1]).join(" "))
      puts "Good luck!"
    end

    def change
      @authenticator.change_password
    end

    def help
      puts "
        // set (rotation1 rotation2 rotation3) - sets the cipher to the three specified rotation numbers.
        // check - prints the current rotation numbers.
        // e (message) - encrypts a message using the last rotation numbers specified using the 'set' command.
        // d (message) - decrypts a message using the last rotation numbers specified using 'set' or generated by the 'er' command.
        // er (message) - encrypts a message using a randomly generated encryption rotation.
        // ef (filename) - encrypts a file with the given filename using the currently set rotation numbers. Outputs a new file called 'encrypted_filename'.
        // df (filename) - decrypts a file with the given filename using the currently set rotation numbers. Outputs a new file called 'decrypted_filename'.
        // crack (message) - attempts to crack a message; prints a hash of text to search for a message.
        // pwd - allows you to change the login password.
        // quit - exits the program."
    end

  end
end