require_relative 'authenticate'
require_relative 'cipher'
require_relative 'crack'
require_relative 'decrypt'
require_relative 'encrypt'

module Encryptor
  class Runtime

    def initialize
      last_rotation1 = 0
      @last_rotation1 = last_rotation1
      last_rotation2 = 0
      @last_rotation2 = last_rotation2
      last_rotation3 = 0
      @last_rotation3 = last_rotation3
      @encryptor = Encrypt.new
      @decryptor = Decrypt.new
      @cracker = Crack.new
      @authenticator = Authenticator.new
    end

    def run
      puts "\nWelcome to Encryptor!"
      @authenticator.authenticate_user
      puts "Logged in. Type 'help' for instructions."
      @command = ""
      while @command != "q"
        puts "\nenter command: "
        print ">"
        input = gets.chomp
        @parts = input.split
        @command = @parts[0]
        parse_input
      end
    end

    def parse_input
      case @command
          when "e" then rand_encrypt
          when "er" then num_encrypt
          when "d" then rand_decrypt
          when "dr" then num_decrypt
          when "c" then cracks
          when "p" then change
          when "help" then help
          when "q"
            puts "Goodbye! Encryptor is shutting down."
          else
            puts "Unknown command, please try again."
      end
    end

    def rand_encrypt
      @last_rotation1 = rand(91)
      @last_rotation2 = rand(91)
      @last_rotation3 = rand(91)
      puts @encryptor.encrypt(@parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
    end

    def num_encrypt
      puts @encryptor.encrypt(@parts[4..-1].join(" "), @parts[1].to_i, @parts[2].to_i, @parts[3].to_i)
    end

    def rand_decrypt
      puts @decryptor.decrypt(@parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
    end

    def num_decrypt
      puts @decryptor.decrypt(@parts[4..-1].join(" "), @parts[1].to_i, @parts[2].to_i, @parts[3].to_i)
    end

    def cracks
      puts @cracker.crack((@parts[1..-1]).join(" "))
    end

    def change
      @authenticator.change_password
    end

    def help
      puts "
        // e (message) - encrypts a message using a randomly generated encryption rotation.
        // er (rotation1 rotation2 rotation3 message) - encrypts a message using the specified rotation numbers.
        // d (message) - decrypts a message using the last rotation numbers generated by the 'e' command.
        // dr (rotation1 rotation2 rotation3 message) - decrypts a message using the specified rotation numbers.
        // c (message) - attempts to crack a message written with a single rotation number.
        // p - allows you to change the login password.
        // q - exits the program."
    end

  end
end