require_relative 'authenticate'
require_relative 'cipher'
require_relative 'crack'
require_relative 'decrypt'
require_relative 'encrypt'

module Encryptor
  class Runtime

    def initialize
      last_rotation1 = 0
      @last_rotation1 = last_rotation1
      last_rotation2 = 0
      @last_rotation2 = last_rotation2
      last_rotation3 = 0
      @last_rotation3 = last_rotation3
      @encryptor = Encrypt.new
      @decryptor = Decrypt.new
      @cracker = Crack.new
    end

    def run
      puts "Welcome to Encryptor"
      author = Authenticator.new
      author.authenticate_user
      command = ""
      while command != "quit"
        puts ""
        printf "enter command: "
        input = gets.chomp
        parts = input.split
        command = parts[0]
        case command
          when "quit"
            puts "Goodbye! Encryptor is shutting down."
          when "e"
            @last_rotation1 = rand(91)
            @last_rotation2 = rand(91)
            @last_rotation3 = rand(91)
            puts @encryptor.encrypt(parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
          when "er"
            puts @encryptor.encrypt(parts[4..-1].join(" "), parts[1].to_i, parts[2].to_i, parts[3].to_i)
          when "d"
            puts @decryptor.decrypt(parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
          when "dr"
            puts @decryptor.decrypt(parts[4..-1].join(" "), parts[1].to_i, parts[2].to_i, parts[3].to_i)
          when "c"
            puts @cracker.crack((parts[1..-1]).join(" "))
          when "help"
            puts "
            // quit - exits the program
            // e (message) - encrypts a message using a randomly generated encryption rotation.
            // er (message, rotation1, rotation2, rotation3) - encrypts a message using the specified rotation numbers.
            // d (message) - decrypts a message using the last rotation numbers generated by the 'e' command.
            // dr (message, rotation1, rotation2, rotation3) - decrypts a message using the specified rotation numbers.
            // c (message) - attempts to crack a message written with a single rotation number."
          else
            puts "Unknown command, please try again."
        end
      end
    end

  end
end