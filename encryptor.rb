require 'digest/md5'
require 'io/console'
class Encryptor

  def initialize
    last_rotation1 = 0
    @last_rotation1 = last_rotation1
    last_rotation2 = 0
    @last_rotation2 = last_rotation2
    last_rotation3 = 0
    @last_rotation3 = last_rotation3
  end

  def run
    puts "Welcome to Encryptor"
    authenticate_user
    command = ""
    while command != "quit"
      puts ""
      printf "enter command: "
      input = gets.chomp
      parts = input.split
      command = parts[0]
      case command
        when "quit"
          puts "Goodbye! Encryptor is shutting down."
        when "e"
          @last_rotation1 = rand(91)
          @last_rotation2 = rand(91)
          @last_rotation3 = rand(91)
          puts encrypt(parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
        when "er"
          puts encrypt(parts[4..-1].join(" "), parts[1].to_i, parts[2].to_i, parts[3].to_i)
        when "d"
          puts decrypt(parts[1..-1].join(" "), @last_rotation1, @last_rotation2, @last_rotation3)
        when "dr"
          puts decrypt(parts[4..-1].join(" "), parts[1].to_i, parts[2].to_i, parts[3].to_i)
        when "c"
          puts crack((parts[1..-1]).join(" "))
        when "help"
          puts "
          // quit - exits the program
          // e (message) - encrypts a message using a randomly generated encryption rotation.
          // er (message, rotation1, rotation2, rotation3) - encrypts a message using the specified rotation numbers.
          // d (message) - decrypts a message using the last rotation number generated by the 'e' command.
          // dr (message, rotation1, rotation2, rotation3) - decrypts a message using the specified rotation numbers.
          // c (message) - attempts to crack a message written with a single rotation number."
        else
          puts "Unknown command, please try again."
      end
    end
  end

  def authenticate_user
    puts "Please enter the secret password: "
    pwd_try = STDIN.noecho(&:gets)
    pwd_try_encrypted = encrypt(pwd_try, 1, 3, 5)
    pkey = "ymzsijwhfyx"
    pkey_md5 = Digest::MD5.hexdigest(pkey)
    pwd_try_md5 = Digest::MD5.hexdigest(pwd_try_encrypted)
    if pwd_try_md5 != pkey_md5
      puts "You have entered an incorrect password. Aborting."
      fail
    end
  end

  def cipher(rotation)
    characters = (' '..'z').to_a
    rotated_characters = characters.rotate(rotation)
    Hash[characters.zip(rotated_characters)]
  end

  def encrypt_letter (letter, rotation1, rotation2, rotation3)
    cipher_for_rotation1 = cipher(rotation1)
    cipher_for_rotation1[letter]
    cipher_for_rotation2 = cipher(rotation2)
    cipher_for_rotation2[letter]
    cipher_for_rotation3 = cipher(rotation3)
    cipher_for_rotation3[letter]
  end

  def encrypt(string, rotation1, rotation2, rotation3)
    letters = string.split("")
    results = letters.collect do |letter|
      encrypt_letter(letter, rotation1, rotation2, rotation3)
    end
    results.join
  end

  def decrypt_letter (letter, rotation1, rotation2, rotation3)
    cipher_for_rotation1 = cipher(-rotation1)
    cipher_for_rotation1[letter]
    cipher_for_rotation2 = cipher(-rotation2)
    cipher_for_rotation2[letter]
    cipher_for_rotation3 = cipher(-rotation3)
    cipher_for_rotation3[letter]
  end

  def decrypt(string, rotation1 = @last_rotation1, rotation2 = @last_rotation2, rotation3 = @last_rotation3)
    letters = string.split("")
    results = letters.collect do |letter|
      decrypt_letter(letter, rotation1, rotation2, rotation3)
    end
    results.join
  end

  def encrypt_file(filename, rotation1, rotation2, rotation3)
    file_in = File.open(filename, "r")
    encrypted_mojo = encrypt(file_in.read, rotation1, rotation2, rotation3)
    file_out = File.open("encrypted_#{filename}", "w")
    file_out.write(encrypted_mojo)
    file_out.close
  end

  def decrypt_file(filename, rotation1, rotation2, rotation3)
    file_in = File.open(filename, "r")
    decrypted_mojo = decrypt(file_in.read, rotation1, rotation2, rotation3)
    file_out = File.open("decrypted_#{filename}", "w")
    file_out.write(decrypted_mojo)
    file_out.close
  end

  def supported_characters
    (' '..'z').to_a
  end

  def crack_decrypt_letter (letter, rotation)
    cipher_for_rotation = cipher(-rotation)
    cipher_for_rotation[letter]
  end

  def crack_decrypt(string, rotation)
    letters = string.split("")
    results = letters.collect do |letter|
      crack_decrypt_letter(letter, rotation)
    end
    results.join
  end

  def crack(message)
    supported_characters.count.times.collect do |attempt|
      crack_decrypt(message,attempt)
    end
  end

end

encryptor = Encryptor.new
encryptor.run